# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

## 1. Lépés: Használjuk a hivatalos .NET ASP.NET futtatókörnyezetet
# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# 2. Lépés: Build image
# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# A projekt fájl másolása és build
COPY ["Employee Attendance Api.csproj", "."]
RUN dotnet restore "./Employee Attendance Api.csproj"


# Teljes forráskód másolása és build
COPY . .
WORKDIR "/src/."
RUN dotnet build "./Employee Attendance Api.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Employee Attendance Api.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false


# 3. Lépés: Runtime konténer létrehozása
# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish 


# Futtatás.
ENTRYPOINT ["dotnet", "Employee Attendance Api.dll"]